#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class NetworkStatus:
  ONLINE = 1
  OFFLINE = 2

  _VALUES_TO_NAMES = {
    1: "ONLINE",
    2: "OFFLINE",
  }

  _NAMES_TO_VALUES = {
    "ONLINE": 1,
    "OFFLINE": 2,
  }


class Context:
  """
  Attributes:
   - containerName
   - stationIdentPlaying
   - otherContext
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'containerName', None, None, ), # 1
    (2, TType.STRING, 'stationIdentPlaying', None, None, ), # 2
    (3, TType.MAP, 'otherContext', (TType.STRING,None,TType.STRING,None), None, ), # 3
  )

  def __init__(self, containerName=None, stationIdentPlaying=None, otherContext=None,):
    self.containerName = containerName
    self.stationIdentPlaying = stationIdentPlaying
    self.otherContext = otherContext

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.containerName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.stationIdentPlaying = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.otherContext = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.otherContext[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Context')
    if self.containerName is not None:
      oprot.writeFieldBegin('containerName', TType.STRING, 1)
      oprot.writeString(self.containerName)
      oprot.writeFieldEnd()
    if self.stationIdentPlaying is not None:
      oprot.writeFieldBegin('stationIdentPlaying', TType.STRING, 2)
      oprot.writeString(self.stationIdentPlaying)
      oprot.writeFieldEnd()
    if self.otherContext is not None:
      oprot.writeFieldBegin('otherContext', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.otherContext))
      for kiter7,viter8 in self.otherContext.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EventData:
  """
  Attributes:
   - stationIdent
   - trackId
   - trackVersionId
   - otherEventData
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'stationIdent', None, None, ), # 1
    (2, TType.STRING, 'trackId', None, None, ), # 2
    (3, TType.STRING, 'trackVersionId', None, None, ), # 3
    (4, TType.MAP, 'otherEventData', (TType.STRING,None,TType.STRING,None), None, ), # 4
  )

  def __init__(self, stationIdent=None, trackId=None, trackVersionId=None, otherEventData=None,):
    self.stationIdent = stationIdent
    self.trackId = trackId
    self.trackVersionId = trackVersionId
    self.otherEventData = otherEventData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.stationIdent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.trackId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.trackVersionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.otherEventData = {}
          (_ktype10, _vtype11, _size9 ) = iprot.readMapBegin()
          for _i13 in xrange(_size9):
            _key14 = iprot.readString();
            _val15 = iprot.readString();
            self.otherEventData[_key14] = _val15
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EventData')
    if self.stationIdent is not None:
      oprot.writeFieldBegin('stationIdent', TType.STRING, 1)
      oprot.writeString(self.stationIdent)
      oprot.writeFieldEnd()
    if self.trackId is not None:
      oprot.writeFieldBegin('trackId', TType.STRING, 2)
      oprot.writeString(self.trackId)
      oprot.writeFieldEnd()
    if self.trackVersionId is not None:
      oprot.writeFieldBegin('trackVersionId', TType.STRING, 3)
      oprot.writeString(self.trackVersionId)
      oprot.writeFieldEnd()
    if self.otherEventData is not None:
      oprot.writeFieldBegin('otherEventData', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.otherEventData))
      for kiter16,viter17 in self.otherEventData.items():
        oprot.writeString(kiter16)
        oprot.writeString(viter17)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BBMUserEvent:
  """
  Attributes:
   - timestamp
   - uuid
   - apikey
   - userId
   - eventType
   - networkStatus
   - context
   - eventData
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'timestamp', None, None, ), # 1
    (2, TType.STRING, 'uuid', None, None, ), # 2
    (3, TType.STRING, 'apikey', None, None, ), # 3
    (4, TType.I32, 'userId', None, None, ), # 4
    (5, TType.STRING, 'eventType', None, None, ), # 5
    (6, TType.I32, 'networkStatus', None, None, ), # 6
    (7, TType.STRUCT, 'context', (Context, Context.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'eventData', (EventData, EventData.thrift_spec), None, ), # 8
  )

  def __init__(self, timestamp=None, uuid=None, apikey=None, userId=None, eventType=None, networkStatus=None, context=None, eventData=None,):
    self.timestamp = timestamp
    self.uuid = uuid
    self.apikey = apikey
    self.userId = userId
    self.eventType = eventType
    self.networkStatus = networkStatus
    self.context = context
    self.eventData = eventData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.uuid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.apikey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.userId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.eventType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.networkStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.context = Context()
          self.context.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.eventData = EventData()
          self.eventData.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BBMUserEvent')
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 1)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.uuid is not None:
      oprot.writeFieldBegin('uuid', TType.STRING, 2)
      oprot.writeString(self.uuid)
      oprot.writeFieldEnd()
    if self.apikey is not None:
      oprot.writeFieldBegin('apikey', TType.STRING, 3)
      oprot.writeString(self.apikey)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I32, 4)
      oprot.writeI32(self.userId)
      oprot.writeFieldEnd()
    if self.eventType is not None:
      oprot.writeFieldBegin('eventType', TType.STRING, 5)
      oprot.writeString(self.eventType)
      oprot.writeFieldEnd()
    if self.networkStatus is not None:
      oprot.writeFieldBegin('networkStatus', TType.I32, 6)
      oprot.writeI32(self.networkStatus)
      oprot.writeFieldEnd()
    if self.context is not None:
      oprot.writeFieldBegin('context', TType.STRUCT, 7)
      self.context.write(oprot)
      oprot.writeFieldEnd()
    if self.eventData is not None:
      oprot.writeFieldBegin('eventData', TType.STRUCT, 8)
      self.eventData.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    if self.uuid is None:
      raise TProtocol.TProtocolException(message='Required field uuid is unset!')
    if self.apikey is None:
      raise TProtocol.TProtocolException(message='Required field apikey is unset!')
    if self.userId is None:
      raise TProtocol.TProtocolException(message='Required field userId is unset!')
    if self.eventType is None:
      raise TProtocol.TProtocolException(message='Required field eventType is unset!')
    if self.networkStatus is None:
      raise TProtocol.TProtocolException(message='Required field networkStatus is unset!')
    if self.context is None:
      raise TProtocol.TProtocolException(message='Required field context is unset!')
    if self.eventData is None:
      raise TProtocol.TProtocolException(message='Required field eventData is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BBMUserEventBatch:
  """
  Attributes:
   - userEvent
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'userEvent', (TType.STRUCT,(BBMUserEvent, BBMUserEvent.thrift_spec)), None, ), # 1
  )

  def __init__(self, userEvent=None,):
    self.userEvent = userEvent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.userEvent = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = BBMUserEvent()
            _elem23.read(iprot)
            self.userEvent.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BBMUserEventBatch')
    if self.userEvent is not None:
      oprot.writeFieldBegin('userEvent', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.userEvent))
      for iter24 in self.userEvent:
        iter24.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userEvent is None:
      raise TProtocol.TProtocolException(message='Required field userEvent is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
